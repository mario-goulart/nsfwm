;; -*- scheme -*-

(import scheme)
(cond-expand
  (chicken-4
   (import chicken)
   (use extras posix srfi-1)
   (use nsfwm xlib))
  (chicken-5
   (import (chicken condition)
           (chicken fixnum)
           (chicken format)
           (chicken pretty-print)
           (chicken process)
           (chicken string))
   (import nsfwm)
   (import srfi-1 xlib))
  (else
   (error "Unsupported CHICKEN version.")))

(set-num-workspaces! 4)

(define (hide/show-window window-name)
  (lambda ()
    (let ((windows (get-windows-by-name window-name)))
      (unless (null? windows)
        (let ((window (car windows)))
          (if (and (window-selected? window)
                   (window-in-workspace? window (current-workspace)))
              (hide-window! window)
              (let ((prev-workspaces
                     (find-window-in-workspaces window)))
                (move-window-to-workspace! window
                                           (current-workspace)
                                           (if (null? prev-workspaces)
                                               #f
                                               (car prev-workspaces)))
                (select-window! window))))))))

(define hide/show-handy-term
  (hide/show-window "handy-term"))

(define (debug*)
  (let ((t1 (car (get-windows-by-name "t1")))
        (t2 (car (get-windows-by-name "t2"))))
    (pp (map window-name (all-windows)))
    (print "Windows overlap? " (windows-overlap? (window-corners t1)
                                                 (window-corners t2)))
    (printf "Window 1 pos: ~a ~a\n" (window-position-x t1) (window-position-y t1))
    (printf "Window 2 pos: ~a ~a\n" (window-position-x t2) (window-position-y t2))
    (for-each (lambda (w)
                (printf "~S visible?: ~s\n" w (window-visible? w)))
              (all-windows))
    (flush-output)))


(bind-key! '(Alt Tab) select-next-window!)
(bind-key! '(Alt F4) (lambda () (destroy-window! (selected-window))))
(bind-key! '(Alt Space) hide/show-handy-term)
(bind-key! '(Super r) resize-window-to-pointer-position!)
(bind-key! '(Super Return) (lambda () (system "xterm &")))
(bind-key! '(Super M) (lambda () (toggle-maximize-window! (selected-window))))
(bind-key! '(Super Backspace) debug*)

(bind-key! '(Shift Super Right) (lambda () (bump-window-right! (selected-window) until: 'pointer)))
(bind-key! '(Shift Super Left) (lambda () (bump-window-left! (selected-window) until: 'pointer)))
(bind-key! '(Shift Super Up) (lambda () (bump-window-up! (selected-window) until: 'pointer)))
(bind-key! '(Shift Super Down) (lambda () (bump-window-down! (selected-window) until: 'pointer)))

(bind-key! '(Super Right) (lambda () (bump-window-right! (selected-window))))
(bind-key! '(Super Left) (lambda () (bump-window-left! (selected-window))))
(bind-key! '(Super Up) (lambda () (bump-window-up! (selected-window))))
(bind-key! '(Super Down) (lambda () (bump-window-down! (selected-window))))


(bind-key! '(Super F1) (lambda () (move-to-workspace! 0)))
(bind-key! '(Super F2) (lambda () (move-to-workspace! 1)))
(bind-key! '(Super F3) (lambda () (move-to-workspace! 2)))
(bind-key! '(Super F4) (lambda () (move-to-workspace! 3)))

(bind-key! '(Alt 1) (lambda () (switch-to-workspace! 0)))
(bind-key! '(Alt 2) (lambda () (switch-to-workspace! 1)))
(bind-key! '(Alt 3) (lambda () (switch-to-workspace! 2)))
(bind-key! '(Alt 4) (lambda () (switch-to-workspace! 3)))

;; Set background color
(system "xsetroot -solid deepskyblue4 &")

(add-hook! map-window-hook 'place-terms
           (lambda (window)
             (when (equal? (window-name window) "t1")
               (resize-window! window 200 150)
               (move-window! window 700 200))
             (when (equal? (window-name window) "t2")
               (resize-window! window 200 150)
               (move-window! window 550 250))))

(system "xterm -title t1 &")
(system "xterm -title t2 &")

;; Run handy-term
(add-hook! map-window-hook 'place-handy-term
           (lambda (window)
             (when (equal? (window-name window) "handy-term")
               (resize-window! window 800 600)
               (move-window! window 200 100))))

(system "xterm -title handy-term &")


;; Dock apps
(system "wmcpuload -bw &")
(system "wmmemload -bw &")

(define dock-layout
  '("wmcpuload"
    "wmmemload"))

(define (dock-window! window)
  (let* ((wname (window-name window))
         (dock-pos (list-index (lambda (name)
                                 (equal? wname name))
                               dock-layout)))
    (when dock-pos
      (move-window! window 0 (* dock-pos 64))
      (set-window-sticky?! window #t)
      (set-window-cycle-skip?! window #t))))

(add-hook! map-window-hook 'dock dock-window!)

(add-hook! enter-workspace-hook 'debug
           (lambda (workspace)
             (print* "Switching to workspace " (workspace-id workspace) "\n")))
