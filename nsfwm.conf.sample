;; -*- scheme -*-

(import scheme)
(cond-expand
  (chicken-4
   (import chicken)
   (use extras posix srfi-1)
   (use nsfwm xlib))
  (chicken-5
   (import (chicken condition)
           (chicken fixnum)
           (chicken format)
           (chicken pretty-print)
           (chicken process)
           (chicken string))
   (import nsfwm)
   (import srfi-1 xlib))
  (else
   (error "Unsupported CHICKEN version.")))

(set-num-workspaces! 4)

(define (hide/show-handy-term)
  (let ((terms (get-windows-by-name "handy-term")))
    (unless (null? terms)
      (let ((handy-term (car terms))
            (wsid (workspace-id (current-workspace))))
        (if (and (window-in-workspace? handy-term wsid)
                 (window-visible? handy-term))
            (hide-window! handy-term)
            (let ((prev-workspace-ids
                   (find-window-in-workspaces handy-term)))
              (move-window-to-workspace! handy-term
                                         wsid
                                         (if (null? prev-workspace-ids)
                                             #f
                                             (car prev-workspace-ids)))
              (select-window! handy-term)))))))

(define (window-zoom! window in/out)
  (when window
    (let ((borders-width (fx* (window-border-width window) 2)))
      (resize-window! window
                      (in/out (fx+ (window-width window) borders-width) 10)
                      (in/out (fx+ (window-height window) borders-width) 10)))))

(define (window-zoom-in! window)
  (window-zoom! window fx+))

(define (window-zoom-out! window)
  (window-zoom! window fx-))

(define (debug*)
  (let ((t1 (car (get-windows-by-name "t1")))
        (t2 (car (get-windows-by-name "t2"))))
    (pp (map window-name (all-windows)))
    (print "Windows overlap? " (windows-overlap? (window-corners t1)
                                                 (window-corners t2)))
    (printf "Window 1 pos: ~a ~a\n" (window-position-x t1) (window-position-y t1))
    (printf "Window 2 pos: ~a ~a\n" (window-position-x t2) (window-position-y t2))
    (for-each (lambda (w)
                (printf "~S visible?: ~s\n" w (window-visible? w)))
              (all-windows))
    (flush-output)))


(define mod-key MOD1MASK)

(global-keymap
 (list (make-key mod-key XK_RETURN (lambda () (system "xterm &")))
       (make-key mod-key XK_PRIOR (lambda () (window-zoom-in! (selected-window))))
       (make-key mod-key XK_NEXT (lambda () (window-zoom-out! (selected-window))))
       (make-key mod-key XK_RIGHT (lambda () (bump-window-right! (selected-window))))
       (make-key mod-key XK_LEFT (lambda () (bump-window-left! (selected-window))))
       (make-key mod-key XK_UP (lambda () (bump-window-up! (selected-window))))
       (make-key mod-key XK_DOWN (lambda () (bump-window-down! (selected-window))))
       (make-key mod-key XK_F2 (lambda () (grow-window-left! (selected-window))))
       (make-key mod-key XK_F3 (lambda () (grow-window-right! (selected-window))))
       (make-key mod-key XK_F7 (lambda () (grow-window-up! (selected-window))))
       (make-key mod-key XK_F8 (lambda () (grow-window-down! (selected-window))))
       (make-key mod-key XK_F5 (lambda () (set-window-decoration! (selected-window) border-width: 30)))
       (make-key mod-key XK_TAB    select-next-window!)
       (make-key mod-key XK_F4 (lambda () (destroy-window! (selected-window))))
       (make-key mod-key XK_F9 (lambda () (toggle-maximize-window! (selected-window))))
       (make-key mod-key XK_LCQ    exit)
       (make-key mod-key XK_1 (lambda () (switch-to-workspace! 0)))
       (make-key mod-key XK_2 (lambda () (switch-to-workspace! 1)))
       (make-key mod-key XK_3 (lambda () (switch-to-workspace! 2)))
       (make-key mod-key XK_4 (lambda () (switch-to-workspace! 3)))
       (make-key mod-key XK_SPACE hide/show-handy-term)
       (make-key mod-key XK_BACKSPACE debug*)))

;; Set background color
(system "xsetroot -solid deepskyblue4 &")

(system "xterm -title t1 &")
(system "xterm -title t2 &")
(add-hook! map-window-hook 'place-terms
           (lambda (window)
             (when (equal? (window-name window) "t1")
               (resize-window! window 200 150)
               (move-window! window 700 200))
             (when (equal? (window-name window) "t2")
               (resize-window! window 200 150)
               (move-window! window 550 250))))

;; Run handy-term
(system "xterm -title handy-term &")
(add-hook! map-window-hook 'place-handy-term
           (lambda (window)
             (when (equal? (window-name window) "handy-term")
               (resize-window! window 800 600)
               (move-window! window 200 100))))

;; Dock apps
(system "wmcpuload -bw &")
(system "wmmemload -bw &")

(define dock-layout
  '("wmcpuload"
    "wmmemload"))

(define (dock-window! window)
  (let* ((wname (window-name window))
         (dock-pos (list-index (lambda (name)
                                 (equal? wname name))
                               dock-layout)))
    (when dock-pos
      (move-window! window 0 (* dock-pos 64))
      (set-window-sticky?! window #t)
      (set-window-cycle-skip?! window #t))))

(add-hook! map-window-hook 'dock dock-window!)


(define xosd-installed?
  (handle-exceptions exn
    #f
    (eval '(use xosd))
    #t))

(add-hook! enter-workspace-hook 'debug
           (lambda (workspace)
             (if xosd-installed?
                 (process-fork
                  (lambda ()
                    (let ((osd (xosd:create 1)))
                      (xosd:set-font osd "fixed")
                      (xosd:set-colour osd "Yellow")
                      (xosd:set-align osd 'right)
                      (xosd:set-timeout osd 1)
                      (xosd:display osd 0 'string (conc "Workspace " workspace))
                      (xosd:wait-until-no-display osd)
                   (xosd:destroy osd))))
                 (print* "Switching to workspace " workspace "\n"))))
